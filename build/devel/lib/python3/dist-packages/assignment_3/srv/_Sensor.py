# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from assignment_3/SensorRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SensorRequest(genpy.Message):
  _md5sum = "989288cfff8e9e902b72e5737ffeb13a"
  _type = "assignment_3/SensorRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Sensor srv models request/response for sensors
# expects a given range to look for objects
int32 sensorRange
int32 subID
"""
  __slots__ = ['sensorRange','subID']
  _slot_types = ['int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sensorRange,subID

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SensorRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.sensorRange is None:
        self.sensorRange = 0
      if self.subID is None:
        self.subID = 0
    else:
      self.sensorRange = 0
      self.subID = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i().pack(_x.sensorRange, _x.subID))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.sensorRange, _x.subID,) = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i().pack(_x.sensorRange, _x.subID))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.sensorRange, _x.subID,) = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from assignment_3/SensorResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SensorResponse(genpy.Message):
  _md5sum = "014542b4fc21a2f4be0ac376e228b21c"
  _type = "assignment_3/SensorResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# boolean responses allow for easy access to whether objects were detected
# and in which direction
bool objectNorth
bool objectSouth
bool objectEast
bool objectWest
bool objectDetected

int32[] northRadar
int32[] southRadar
int32[] eastRadar
int32[] westRadar
"""
  __slots__ = ['objectNorth','objectSouth','objectEast','objectWest','objectDetected','northRadar','southRadar','eastRadar','westRadar']
  _slot_types = ['bool','bool','bool','bool','bool','int32[]','int32[]','int32[]','int32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       objectNorth,objectSouth,objectEast,objectWest,objectDetected,northRadar,southRadar,eastRadar,westRadar

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SensorResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.objectNorth is None:
        self.objectNorth = False
      if self.objectSouth is None:
        self.objectSouth = False
      if self.objectEast is None:
        self.objectEast = False
      if self.objectWest is None:
        self.objectWest = False
      if self.objectDetected is None:
        self.objectDetected = False
      if self.northRadar is None:
        self.northRadar = []
      if self.southRadar is None:
        self.southRadar = []
      if self.eastRadar is None:
        self.eastRadar = []
      if self.westRadar is None:
        self.westRadar = []
    else:
      self.objectNorth = False
      self.objectSouth = False
      self.objectEast = False
      self.objectWest = False
      self.objectDetected = False
      self.northRadar = []
      self.southRadar = []
      self.eastRadar = []
      self.westRadar = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5B().pack(_x.objectNorth, _x.objectSouth, _x.objectEast, _x.objectWest, _x.objectDetected))
      length = len(self.northRadar)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.northRadar))
      length = len(self.southRadar)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.southRadar))
      length = len(self.eastRadar)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.eastRadar))
      length = len(self.westRadar)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.westRadar))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.objectNorth, _x.objectSouth, _x.objectEast, _x.objectWest, _x.objectDetected,) = _get_struct_5B().unpack(str[start:end])
      self.objectNorth = bool(self.objectNorth)
      self.objectSouth = bool(self.objectSouth)
      self.objectEast = bool(self.objectEast)
      self.objectWest = bool(self.objectWest)
      self.objectDetected = bool(self.objectDetected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.northRadar = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.southRadar = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.eastRadar = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.westRadar = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5B().pack(_x.objectNorth, _x.objectSouth, _x.objectEast, _x.objectWest, _x.objectDetected))
      length = len(self.northRadar)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.northRadar.tostring())
      length = len(self.southRadar)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.southRadar.tostring())
      length = len(self.eastRadar)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.eastRadar.tostring())
      length = len(self.westRadar)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.westRadar.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.objectNorth, _x.objectSouth, _x.objectEast, _x.objectWest, _x.objectDetected,) = _get_struct_5B().unpack(str[start:end])
      self.objectNorth = bool(self.objectNorth)
      self.objectSouth = bool(self.objectSouth)
      self.objectEast = bool(self.objectEast)
      self.objectWest = bool(self.objectWest)
      self.objectDetected = bool(self.objectDetected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.northRadar = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.southRadar = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.eastRadar = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.westRadar = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5B = None
def _get_struct_5B():
    global _struct_5B
    if _struct_5B is None:
        _struct_5B = struct.Struct("<5B")
    return _struct_5B
class Sensor(object):
  _type          = 'assignment_3/Sensor'
  _md5sum = '546dae9226dd84d9996bfa16115be7c7'
  _request_class  = SensorRequest
  _response_class = SensorResponse
