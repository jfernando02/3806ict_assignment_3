/*
This csp PAT file is responsible for generating a moveset which will achieve a goal
based on the robot's current interpretation of its environment. It expects world.csp
to be updated with the robot's current understanding of hostiles, survivors, and
visited squares.

It defines two types of moves for every direction (up, left, right, down). These
are visited/unvisited variants, respectively intending to prioritise visiting
already visited locations or unvisited locations. When moving to a new location,
the location is marked as visited. If that location was a survivor, they are
"picked up" by incrementing a variable onBoard.

The robot's position is mainted by xpos and ypos.

It also defines three core goals. These are:
home:
This goal simply attempts to bring the robot back to its home position, as given
by SUB_HOME_X and SUB_HOME_Y provided in world.csp.

goalAreaChecked:
This goal attempts to mark all locations as visited, and to return to the home position
during the process.

noSurvivors:
This goal ensures that all locations are void of survivors if there are remaining spaces
on the bot (onBoard != maxCapacity). In the case that the bot has reached maximum carrying
capacity, survivors are left on the board. In both cases, there is the additional goal of
returning the robot back home.
*/

// include the expected world.csp file which defines the current environment & parameters
#include "world.csp";
#define subCount 2;
#define collision (xpos[0]==xpos[1]&&ypos[0]==ypos[1]);
#define Max (Rows*Cols*2);
var collisionOccured=0;
hvar moveNumber = 0;

// primitive tasks for overall move task
// actions if conditions satisfied:
	// move the position of the sub
	// mark the new position as visited
	// pick up survivor if there was one (onBoard++)

// in order to move up:
// need to check if the current position is not at the boundary
	// xpos != upper boundry, which is first row in world (0)
// need to check if the next position is not an obstacle
	// world[xpos-1][ypos] != Hostile
// need to check if sub is at max capacity ( && (onBoard != maxCapacity))
	// if at max capacity, next position should not include a survivor, as we cannot pick them up
	// || world[xpos-1][ypos] != Survivor
MoveUpIfVisited(i) = [moveNumber<=Max && xpos[i] != 0 && world[xpos[i]-1][ypos[i]] == Visited] moveUp{xpos[i] = xpos[i] - 1; moveNumber=moveNumber+1; world[xpos[i]][ypos[i]] = Visited; if(collision){collisionOccured=1;}else{collisionOccured=collisionOccured;}} -> Skip;
MoveUpIfNotVisited(i) = [moveNumber<=Max && xpos[i] != 0 && world[xpos[i]-1][ypos[i]] != Visited] moveUp{xpos[i] = xpos[i] - 1; moveNumber=moveNumber+1; world[xpos[i]][ypos[i]] = Visited; if(collision){collisionOccured=1;}else{collisionOccured=collisionOccured;}} -> Skip;

// in order to move down:
// need to check if the current position is not at the boundary
	// xpos != lower boundry, which is last row in world (Rows - 1)
// need to check if the next position is not an obstacle
	// world[xpos+1][ypos] != Hostile
// need to check if sub is at max capacity ( && (onBoard != maxCapacity))
	// if at max capacity, next position should not include a survivor, as we cannot pick them up
	// || world[xpos+1][ypos] != Survivor
MoveDownIfVisited(i) = [moveNumber<=Max && xpos[i] != Rows - 1 && world[xpos[i]+1][ypos[i]] == Visited && !collision] moveDown{xpos[i] = xpos[i] + 1; moveNumber=moveNumber+1; world[xpos[i]][ypos[i]] = Visited; if(collision){collisionOccured=1;}else{collisionOccured=collisionOccured;}} -> Skip;
MoveDownIfNotVisited(i) = [moveNumber<=Max && xpos[i] != Rows - 1 && world[xpos[i]+1][ypos[i]] != Visited && !collision] moveDown{xpos[i] = xpos[i] + 1; moveNumber=moveNumber+1; world[xpos[i]][ypos[i]] = Visited; if(collision){collisionOccured=1;}else{collisionOccured=collisionOccured;}} -> Skip;

// in order to move left:
// need to check if the current position is not at the boundary
	// ypos != left boundry, which is first column in world (0)
// need to check if the next position is not an obstacle
	// world[xpos][ypos-1] != Hostile
// need to check if sub is at max capacity ( && (onBoard != maxCapacity))
	// if at max capacity, next position should not include a survivor, as we cannot pick them up
	// || world[xpos][ypos-1] != Survivor
MoveLeftIfVisited(i) = [moveNumber<=Max && ypos[i] != 0 && world[xpos[i]][ypos[i]-1] == Visited && !collision] moveLeft{ypos[i] = ypos[i] - 1; moveNumber=moveNumber+1; world[xpos[i]][ypos[i]] = Visited; if(collision){collisionOccured=1;}else{collisionOccured=collisionOccured;}} -> Skip;
MoveLeftIfNotVisited(i) = [moveNumber<=Max && ypos[i] != 0 && world[xpos[i]][ypos[i]-1] != Visited && !collision] moveLeft{ypos[i] = ypos[i] - 1; moveNumber=moveNumber+1; world[xpos[i]][ypos[i]] = Visited; if(collision){collisionOccured=1;}else{collisionOccured=collisionOccured;}} -> Skip;

// in order to move right:
// need to check if the current position is not at the boundary
	// ypos != right boundry, which is last column in world (Cols - 1)
// need to check if the next position is not an obstacle
	// world[xpos][ypos+1] != Hostile
// need to check if sub is at max capacity ( && (onBoard != maxCapacity))
	// if at max capacity, next position should not include a survivor, as we cannot pick them up
	// || world[xpos][ypos+1] != Survivor
MoveRightIfVisited(i) = [moveNumber<=Max && ypos[i] != Cols - 1 && world[xpos[i]][ypos[i]+1] == Visited && !collision] moveRight{ypos[i] = ypos[i] + 1; moveNumber=moveNumber+1; world[xpos[i]][ypos[i]] = Visited; if(collision){collisionOccured=1;}else{collisionOccured=collisionOccured;}} -> Skip;
MoveRightIfNotVisited(i) = [moveNumber<=Max && ypos[i] != Cols - 1 && world[xpos[i]][ypos[i]+1] != Visited && !collision] moveRight{ypos[i] = ypos[i] + 1; moveNumber=moveNumber+1; world[xpos[i]][ypos[i]] = Visited; if(collision){collisionOccured=1;}else{collisionOccured=collisionOccured;}} -> Skip;

// MoveIfNotVisited attempts to move to the next location that has not previously been visited
MoveIfNotVisited(i) = MoveUpIfNotVisited(i) [] MoveDownIfNotVisited(i) [] MoveLeftIfNotVisited(i) [] MoveRightIfNotVisited(i);
// MoveIfVisited attempts to move to the next location that has previously been visited
MoveIfVisited(i) = MoveUpIfVisited(i) [] MoveDownIfVisited(i) [] MoveLeftIfVisited(i) [] MoveRightIfVisited(i);
// UnVisitedMove priortises MoveIfNotVisited moves, but uses MoveIfVisited when necessary.
UnvisitedMove() = (MoveIfVisited(Sub-1) [] MoveIfNotVisited(Sub-1));UnvisitedMove();
// VisitedMove priortises MoveIfVisited moves, but uses MoveIfNotVisited when necessary.
VisitedMove() = (MoveIfNotVisited(Sub-1) [] MoveIfVisited(Sub-1));VisitedMove();

// primitive goal, sub has returned to its home position
#define home (xpos[Sub-1] == SUB_HOME_X && ypos[Sub-1] == SUB_HOME_Y && collisionOccured==0);
// primitive goal, entire survey area has been checked for survivors
#define goalAreaChecked (&& i:{0..Rows-1}@(&& j:{0..Cols-1}@(world[i][j] == Visited))&& home);
// primitive goal, entire survey area is clear of known survivors
#define noSurvivors (&& i:{0..Rows-1}@(&& j:{0..Cols-1}@(world[i][j] != Survivor)) && collisionOccured==0);
